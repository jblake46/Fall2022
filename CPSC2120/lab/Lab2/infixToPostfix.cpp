/*
 * Name: BLake Moore
 * Date Submitted: 9/21
 * Lab Section: 6
 * Assignment Name: infixToPostfix
 */


 //READ ME
 /*
 * there is one bug i couldnt figure out at line 150. i commented it out. so thee post fix array is one less than it is supposed to be 
 and i just couldnt figure out why, but without that line, it doesnt seg fault
 */
#include <string>
#include <stack>
#include <iostream>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols

//created function to determine if the string from infix is a operator
//0 for basic operator, 1 for multiplication/division
//2 for parentheses
// 3 for anything that is not a operator 
int operatorValue(string x)
{
    if(x == "-" || x == "+")
    {
        return 0;
    }
    else if(x == "/" || x == "*")
    {
        return 1;
    }
    else if(x == "(" || x == ")")
    {
        return 2;
    }
    else
    {
        return -1;
    }
}


int infixToPostfix(string infix[], int length, string postfix[])
{
    int arrSize = length;
    //string postfix[arrSize];
    stack<string> operators;
    int parenthesisCount;
    string tellTell;
    string tmp;
    int post = 0;

    //counts all of the "(" and ")"
    for(int i = 0; i < arrSize; i++)
    {
        //tellTell = infix[i].compare("(");
        if(tellTell == "(")
        {
            parenthesisCount++; 
        }
        //tellTell = infix[i].compare(")");
        else if(tellTell == ")")
        {
            parenthesisCount--; 
        }        
    }

    //tests if parenthesis is even, if not return 0
    if(parenthesisCount != 0)
    {
        return 0;
    }
    //iterating through the infix array
    //catches any operators in the array
    for(int i = 0; i < arrSize; i++)
    {
        
        tmp = infix[i];
        //takes any thing that is not an operator
        if(operatorValue(tmp) == -1)
        {
            
            postfix[post] = tmp;
            post++;
        }
        // + / - operators taken care of 
        else if(operatorValue(tmp) == 0)
        {
            while(!operators.empty() && operatorValue(operators.top()) >= 0 && operators.top() != "(")
            {
                postfix[post] = operators.top();
                post++;
                operators.pop();
            }
            operators.push(tmp);
        }
        // * / % operators taken care of 
        else if(operatorValue(tmp) == 1)
        {
            while(!operators.empty() && operatorValue(operators.top()) >= 1 && operators.top() != "(")
            {
                postfix[post] = operators.top();
                post++;
                operators.pop();
            }
            operators.push(tmp);
        }
        else if(operatorValue(tmp) == 2)
        {
            if(infix[i] == "(")
            {
                operators.push(tmp);
                
            }
            else if(infix[i] == ")")
            {
                cout<<"made it here where char = )" << endl;
                while(!operators.empty() && operators.top() != ")")
                {
                    cout<<"made it here where char = )" << endl;
                    postfix[post] = operators.top();
                    post++;
                    operators.pop();
                }
                //operators.pop();
            }
        }
    }
    //puttingthe operator stack to the postfix array 
    while(!operators.empty())
    {
        postfix[post] = operators.top();
        post++;
        operators.pop();
    }
    return post;
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +


int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "+", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}
